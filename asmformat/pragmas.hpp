
/*
 * Project: "ASM Formatter" https://github.com/metablaster/ASM-Formatter
 * Copyright(C) 2023 metablaster (zebal@protonmail.ch)
 * Licensed under the MIT license
 *
*/

/**
 * @file asmformat\pragmas.hpp
 *
 * Pragma defines are used to disable specific compiler and static analysis warnings
 *
 * Short description of header sections:
 *
 * "User code" means both user code(only code in your project) and "library" code
 * "Library code" means only system headers and 3rd party libraries (those included into precompiled header)
 * Warnings can be either compiler generated or static analysis rules (generated by analyzer)
 * /Wall warnings means /Wall only:
 * https://docs.microsoft.com/en-us/cpp/preprocessor/compiler-warnings-that-are-off-by-default
 *
 * TODO: pragmas are not grouped according to warning level
 * pragmas marked with [temp] are temporarily disabled, should be re-enabled and problem fixed
 *
*/

#pragma once
// Macros for specific group of warning
// https://developercommunity.visualstudio.com/t/all-code-analysis-warnings-macro-is-not-up-to-date/251978
#include <CppCoreCheck\warnings.h>

#include <CodeAnalysis\Warnings.h>
// Set to 1 to manually handle which code analysis rules get disabled
// Manual analysis might be required since ALL_CODE_ANALYSIS_WARNINGS may be out of date
#define MANUAL_CODE_ANALYISIS 1

//
// NOTE: about C26489 and C26486, these do not work, do not enable them
// This issue is by design. Because the lifetime analysis does not support SAL.
// The intention is that the interface be annotated using modern C++ conventions or lifetime annotations (which are not yet implemented).
// https://developercommunity.visualstudio.com/content/problem/296685/code-analysis-false-positive-c26489.html
// https://developercommunity.visualstudio.com/content/problem/284449/c26486-false-positive-on-a-null-checked-pointer.html
// NOTE: C26487 (Don't return a pointer that may be invalid) is false positive (raised even if checking the pointer)
// TODO: C26460 and C26461 (The pointer argument can be marked as pointer to const) does not work as expected:
// https://vsf-prod.westus.cloudapp.azure.com/content/problem/24483/c-core-check-false-positive-c26461.html
// TODO: Specify reasons for "Info" and "Disabled" from Analyzer.rulest here
// NOTE: C26467 (converting from floating point to unsigned integral) not present in Analyzer.ruleset
// In code analysis rule set editor "Hidden" and "None" actions have the following meaning:
// Hidden: The violation is not visible to the user. The IDE is notified of the violation, however.
// None: The rule is suppressed. The behavior is the same as if the rule was removed from the rule set.
// https://docs.microsoft.com/en-us/visualstudio/code-quality/working-in-the-code-analysis-rule-set-editor
//

//
// Warning level modifications
//

// Not /Wall
// (W3) Your code uses a function, class member, variable, or typedef that's marked deprecated
// Default is warning level 3 anyway, without this SDL check would turn it into an error
// This is needed since standard says it's warning not error.
#pragma warning (3 : 4996)

#pragma region user_code
//
// Disable compiler warnings for user code (also disables warnings for library code)
//

// Only /Wall warnings
#pragma warning (disable : 4514)	// (W4) unreferenced inline function has been removed
// Overriding pragma
#pragma warning (disable : 4571)	// (W4) catch(...) structured exceptions (SEH) are not caught
#pragma warning (disable : 4820)	// (W4) 'x' bytes padding added after data member 'member name'

// /Qspectre - Specifies compiler generation of instructions to mitigate certain
// Spectre variant 1 security vulnerabilities.
// NOTE: This warning will pop up regardless of /Qspectre switch (unknown if this is /Wall)
#pragma warning (disable : 5045)	// (?) Compiler will insert Spectre mitigation for memory load if /Qspectre switch specified

//
// Disable compiler rules temporarily (consider toggling on/off from time to time)
//

#pragma warning (disable : 4365)	// [temp] (W4) conversion from 'type_1' to 'type_2', signed/unsigned mismatch
#pragma warning (disable : 5219)	// [temp] (W2) implicit conversion from 'type-1' to 'type-2', possible loss of data
// TODO: Likely false positive
#pragma warning (disable : 5264)	// (W4) 'variable-name': 'const' variable is not used

#ifdef NDEBUG
// Not /Wall
#pragma warning (disable : 4711)	// (W1) function 'function' selected for inline expansion ( raised in release builds only )
#endif // NDEBUG

//
// Disable static analysis rules temporarily for user code (consider toggling on/off from time to time)
// These rules are temporarily disabled here, because it should not be ignored in ruleset.
//

// NOTE: C26415 and C26418 likely false positive, see link below for more info
// https://developercommunity.visualstudio.com/content/problem/461654/analysis-cant-see-move-to-constructor-inside-of-st.html
#pragma warning (disable : 26415)	// [temp] Smart pointer parameter 'pointer' is used only to access contained pointer. Use T * or T & instead(r.30)
#pragma warning (disable : 26418)	// [temp] Shared pointer parameter 'pointer' is not copied or moved. Use T * or T & instead(r.36)
#pragma warning (disable : 26467)	// Converting from floating point to unsigned integral types results in non-portable code.

#ifdef TEST_PROJECT
//
// Disable compiler warnings for user code (specific for test projects)
//
// Only /Wall warnings
#pragma warning (disable : 4626)	// (W4) assignment operator was implicitly defined as deleted
#pragma warning (disable : 4710)	// (W4) function not inlined
#pragma warning (disable : 5027)	// (W1, W4) move assignment operator implicitly defined as deleted

// Duplicate pragma (warning introduced after update to 16.11.0, consider toggling off)
#pragma warning (disable : 5246)	// (W1)	'member': the initialization of a subobject should be wrapped in braces

//
// Disable static analysis rules for user code (specific for test projects)
//
// Overriding pragma
#pragma warning (disable : 26440)	// Function 'func' can be declared 'noexcept'
#endif // TEST_PROJECT
#pragma endregion Warnings are disabled for both user and library code

#pragma region library_code
//
// Disable compiler warnings for library code (that is for precompiled header only)
// NOTE: (push, 0) does not work, need to disable warning by warning!
//
#pragma warning (push)
// Only /Wall warnings
//#pragma warning (disable : 4061)	// (W4) enumerator in switch of enum is not explicitly handled by a case label
#pragma warning (disable : 4191)	// (W3) 'type cast' unsafe conversion from 'x' to 'y'
//#pragma warning (disable : 4355)	// (?) 'this' used in base member initializer list
#pragma warning (disable : 4365)	// (W4) signed/unsigned mismatch
#pragma warning (disable : 4371)	// (W3) layout of class may have changed from a previous version of the compiler due to better packing of member
#pragma warning (disable : 4388)	// (W4) '==' signed/unsigned mismatch
// Overriding pragma
//#pragma warning (disable : 4571)	// (W4) catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught
#pragma warning (disable : 4619)	// (W3) pragma warning: there is no waring number 'xxxx'
#pragma warning (disable : 4623)	// (W4) default constructor was implicitly defined as deleted
#pragma warning (disable : 4625)	// (W4) copy constructor was implicitly defined as deleted
#pragma warning (disable : 4626)	// (W4) assignment operator was implicitly defined as deleted
#pragma warning (disable : 4643)	// (W4) Forward declaring 'xxx' in namespace std is not permitted by the C++ Standard.
#pragma warning (disable : 4668)	// (W4) 'MACRO' is not defined as a preprocessor macro, replacing with '0' for #if/#elif
#pragma warning (disable : 4710)	// (W4) function not inlined
#pragma warning (disable : 4738)	// (W3) storing 32-bit float result in memory, possible loss of performance
//#pragma warning (disable : 4774)	// (W4) 'function' format string expected in argument 'x' is not a string literal
#pragma warning (disable : 4800)	// (W4) implicit conversion from 'type' to 'type' possible information loss
#pragma warning (disable : 4868)	// (W4) compiler may not enforce left-to-right evaluation order in braced initializer list
#pragma warning (disable : 5026)	// (W1, W4) move constructor implicitly defined as deleted
#pragma warning (disable : 5027)	// (W1, W4) move assignment operator implicitly defined as deleted
#pragma warning (disable : 5031)	// (W4) #pragma warning(pop): likely mismatch, popping warning state pushed in different file
#pragma warning (disable : 5246)	// (W1)	'member': the initialization of a subobject should be wrapped in braces

// (W4) pointer or reference to potentially throwing function passed to extern C function under - EHc.
// Undefined behavior may occur if this function throws an exception.Roulette
#pragma warning (disable : 5039)

// (W4) 'name': a non-static data member with a volatile qualified type no longer implies that compiler generated copy/move
// constructors and copy/move assignment operators are not trivial
#pragma warning (disable : 5220)

// (W3) 'Class': class has virtual functions, but its trivial destructor is not virtual;
// instances of objects derived from this class may not be destructed correctly
#pragma warning (disable : 5204)

#pragma warning (disable : 5243)	// (W1) 'function' using incomplete class 'class' can cause potential one definition rule violation due to ABI limitation
#pragma warning (disable : 5262)	// (W1) implicit fall-through occurs here; are you missing a break statement? Use [[fallthrough]] when a break statement is intentionally omitted between cases
#pragma warning (disable : 4464)	// (W4) relative include path contains '..'

// Not /Wall warnings
#pragma warning (disable : 4996)	// (W3) Your code uses a function, class member, variable, or typedef that's marked deprecated
#pragma warning (disable : 5105)	// (W1) macro expansion producing 'defined' has undefined behavior
#pragma warning (disable : 5054)	// (?) operator '&' deprecated between enumerations of different types

//
// Disable static analysis rules for library code (that is for precompiled header only)
//
#if !MANUAL_CODE_ANALYISIS
#pragma warning (disable : ALL_CODE_ANALYSIS_WARNINGS )

// NOTE: this was used prior discovery of ALL_CODE_ANALYSIS_WARNINGS
#else
#pragma warning (disable : 6244)	// Local declaration of 'var' hides previous declaration
#pragma warning (disable : 26432)	// If you define or delete any default operation in the type 'type', define or delete them all
#pragma warning (disable : 26433)	// Function 'f' should be marked with override
#pragma warning (disable : 26443)	// Overriding destructor should not use explicit 'override' or 'virtual' specifiers
#pragma warning (disable : 26447)	// The function is declared 'noexcept' but calls function which may throw exceptions
#pragma warning (disable : 26455)	// Default constructor may not throw. Declare it 'noexcept'
#pragma warning (disable : 26466)	// Don't use static_cast downcasts. A cast from a polymorphic type should use dynamic_cast
#pragma warning (disable : 26496)	// The variable 'var' is assigned only once, mark it as const

// mostly in boost headers:
#pragma warning (disable : 6269)	// Possibly incorrect order of operations
#pragma warning (disable : 26135)	// Missing annotation at function
#pragma warning (disable : 26160)	// Caller possibly failing to hold lock before calling function
#pragma warning (disable : 26402)	// Return a scoped object instead of a heap-allocated if it has a move constructor
#pragma warning (disable : 26434)	// function 'func' hides a non-virtual function
#pragma warning (disable : 26435)	// Function should specify exactly one of virtual, override or final
#pragma warning (disable : 26436)	// The type 'type' with a virtual function needs either public virtual or protected non-virtual destructor
#pragma warning (disable : 26444)	// Avoid unnamed objects with custom construction and destruction
#pragma warning (disable : 26451)	// arithmetic overflow using operator on x byte value and then casting the result to y byte value
#pragma warning (disable : 26456)	// operator hides a non-virtual operator
#pragma warning (disable : 26457)	// (void) should not be used to ignore return values, use std:ignore instead
#pragma warning (disable : 26459)	// You called an STL function that may be unsafe - this relies on the caller to check that the passed values are correct
#pragma warning (disable : 26462)	// The value pointed by 'x' is assigned only once, mark it as a pointer to const
#pragma warning (disable : 26471)	// Don't use reinterpret_cast. A cast from void* can use static_cast
#pragma warning (disable : 26473)	// Don't cast between pointer types where the source type and the target type are the same
#pragma warning (disable : 26475)	// Do not use function style C casts
#pragma warning (disable : 26476)	// Expression/symbol uses a naked union with multiple type pointers: Use variant instead
#pragma warning (disable : 26491)	// Don't use static_cast downcasts
#pragma warning (disable : 26492)	// Don't use const_cast to cast away const or volatile
#pragma warning (disable : 26494)	// variable 'var' is uninitialized. always initialize an object
#pragma warning (disable : 26495)	// variable 'var' is uninitialized. always initialize an object (this isn't duplicate pragma of 26494)
#pragma warning (disable : 26497)	// The function 'func' could be marked constexpr if compile time is desired
#pragma warning (disable : 26812)	// the enum type 'type' is unscoped. prefer 'enum class' over 'enum'
#pragma warning (disable : 26814)	// the const variable 'var' can be computed at compile time. consider using constexpr
#pragma warning (disable : 26819)	// Unannotated fallthrough between switch labels
#endif // !MANUAL_CODE_ANALYISIS
#pragma endregion Warnings are restored for user code

#pragma region ruleset_modification
//
// Following analyzer warnings are reported as "Info" in ruleset for user code
// Disabling (uncommenting) them won't have any effect on user code (infos), only to library code.
// TODO: Some library (not user) code warnings always appear as warning, even is set as info.
//

// NOTE: this was used prior discovery of ALL_CODE_ANALYSIS_WARNINGS
#if MANUAL_CODE_ANALYISIS
#pragma warning (disable : 26426)	// Global initializer calls non constexpr functions
//#pragma warning (disable : 26430)	// Symbol is not tested for nullness on all paths
// Overriding pragma
#pragma warning (disable : 26440)	// Function can be declared 'noexcept'
#pragma warning (disable : 26460)	// The reference argument for function can be marked as const
#pragma warning (disable : 26461)	// The pointer argument for function can be marked as a pointer to const
#pragma warning (disable : 26485)	// No array to pointer decay

// Promoted from Hidden to Info (Separated here if willing to toggle to "hidden")
//#pragma warning (disable : 26409)	// Avoid calling new and delete explicitly, use std::make_unique<T> instead
//#pragma warning (disable : 26477)	// Use 'nullptr' rather than 0 or NULL
//#pragma warning (disable : 26481)	// Don't use pointer arithmetic. Use span instead
//#pragma warning (disable : 26487)	// Don't return a pointer that may be invalid.
//#pragma warning (disable : 26489)	// Don't dereference a pointer that may be invalid
#pragma warning (disable : 26493)	// [temp] Do not use C style casts

//
// Following analyzer warnings are disabled in ruleset for all code,
// if you see them review the ruleset and/or update project files to read from ruleset instead!
// https://docs.microsoft.com/en-us/visualstudio/code-quality/working-in-the-code-analysis-rule-set-editor
//

//#pragma warning (disable : 26400)	// Do not assign the result of an allocation or a function call with an owner<T> return value to a raw pointer, use owner<T> instead
//#pragma warning (disable : 26401)	// Do not delete a raw pointer that is not an owner<T>
//#pragma warning (disable : 26429)	// Symbol is never tested for nullness, it can be marked as gsl::not_null
//#pragma warning (disable : 26438)	// Avoid 'goto'
//#pragma warning (disable : 26446)	// Prefer to use gsl::at() instead of unchecked subscript operator
//#pragma warning (disable : 26472)	// Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow
//#pragma warning (disable : 26482)	// Only index into array using constant expressions
//#pragma warning (disable : 26486)	// Don't pass a pointer that may be invalid to a function. The parameter in a call may be invalid
//#pragma warning (disable : 26490)	// Don't use reinterpret_cast
#endif // MANUAL_CODE_ANALYISIS
#pragma endregion Filter out only user code info messages

#pragma region global_modification

//
// Disable compiler warnings for library code if enabled for user code
// (toggle on if it's disabled for user code, toggle off otherwise)
//

// Only /Wall warnings
//#pragma warning (disable : 4514)	// (W4) unreferenced inline function has been removed
//#pragma warning (disable : 4571)	// (W4) catch(...) structured exceptions (SEH) are not caught
//#pragma warning (disable : 4820)	// (W4) 'x' bytes padding added after data member 'member'

// unknown if this is /Wall
//#pragma warning (disable : 5045)	// (?) /Qspectre - Specifies compiler generation of instructions to mitigate certain Spectre variant 1 security vulnerabilities.

// Additional warnings raised in release build (disabled globally)
//#ifdef NDEBUG
// Not /Wall
//#pragma warning (disable : 4711)	// (W1) function 'function' selected for inline expansion
//#endif
#pragma endregion Toggle specific user code pragmas

//
// NOTE: Enclose headers that you want to precompile in pch between #include "pragmas.h" and #pragma warning (pop)
// C5031: #pragma warning(pop): likely mismatch, popping warning state pushed in different file
// In pch enclose #pragma warning (pop) between #pragma warning (disable : 5031) and #pragma warning (default : 5031)
//
